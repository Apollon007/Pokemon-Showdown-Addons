diff --git a/commands.js b/commands.js
index 58ad6c0..7b109c4 100644
--- a/commands.js
+++ b/commands.js
@@ -1593,7 +1593,6 @@ var commands = exports.commands = {
 		});
 	},
 
-	away: 'blockchallenges',
 	idle: 'blockchallenges',
 	blockchallenges: function (target, room, user) {
 		user.blockChallenges = true;
diff --git a/config/commands.js b/config/commands.js
index a0d1ae0..1b1f230 100644
--- a/config/commands.js
+++ b/config/commands.js
@@ -1108,6 +1108,16 @@ var commands = exports.commands = {
 	},
 
 	/*********************************************************
+	 * Custom commands
+	 *********************************************************/
+
+	away: function(target, room, user) {
+		user.away = !user.away;
+		user.updateIdentity();
+		this.sendReply("You are " + (user.away ? "now" : "no longer") + " away.");
+	},
+
+	/*********************************************************
 	 * Help commands
 	 *********************************************************/
 
diff --git a/users.js b/users.js
index a324ba9..efe6aee 100644
--- a/users.js
+++ b/users.js
@@ -388,22 +388,23 @@ var User = (function () {
 	};
 	User.prototype.getIdentity = function (roomid) {
 		if (!roomid) roomid = 'lobby';
+		var name = this.name + (this.away ? " - \u0410\u051d\u0430\u0443" : "");
 		if (this.locked) {
-			return Config.lockedSymbol + this.name;
+			return Config.lockedSymbol + name;
 		}
 		if (this.mutedRooms[roomid]) {
-			return Config.mutedSymbol + this.name;
+			return Config.mutedSymbol + name;
 		}
 		var room = Rooms.rooms[roomid];
 		if (room.auth) {
 			if (room.auth[this.userid]) {
-				return room.auth[this.userid] + this.name;
+				return room.auth[this.userid] + name;
 			}
 			if (room.isPrivate) {
-				return Config.groups.default[room.type + 'Room'] + this.name;
+				return Config.groups.default[room.type + 'Room'] + name;
 			}
 		}
-		return this.group + this.name;
+		return this.group + name;
 	};
 	User.prototype.can = function (permission, target, room) {
 		if (this.hasSysopAccess()) return true;
